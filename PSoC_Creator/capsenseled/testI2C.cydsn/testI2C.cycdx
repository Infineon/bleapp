<?xml version="1.0" encoding="utf-8"?>
<blockRegMap version="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://cypress.com/xsd/cyblockregmap cyblockregmap.xsd" xmlns="http://cypress.com/xsd/cyblockregmap">
  <block name="cy_boot" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
  <block name="cy_lfclk" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
  <block name="rx" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
  <block name="I2C" BASE="0x0" SIZE="0x0" desc="Serial Communication Block" visible="true" hidden="false">
    <block name="sclk_s_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="clock_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="miso_m_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="mosi_s_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="select_s_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="SCBCLK" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="rx_wake_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="rx_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="cts_VM" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="SCB_IRQ" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="Device_VM4" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="SCB" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="scl" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="sda" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="or_sclk" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <block name="ZeroTerminal_7" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
    <register name="_CTRL" address="0x40080000" bitWidth="32" desc="Generic control register" hidden="false">
      <field name="OVS" from="3" to="0" access="RW" resetVal="" desc="Serial interface bit period oversampling factor expressed in lP clock cycles. Used for SPI and UART functionality. OVS + 1 IP clock cycles constitute a single serial interface clock/bit cycle." />
      <field name="EC_AM_MODE" from="8" to="8" access="RW" resetVal="" desc="Internally clocked mode ('0') or externally clocked mode ('1') address matching (I2C) or selection (SPI).In internally clocked mode, the serial interface protocols run off the peripheral clock. In externally clocked mode, the serial interface protocols run off the clock as provided by the serial interface." />
      <field name="EC_OP_MODE" from="9" to="9" access="RW" resetVal="" desc="Internally clocked mode ('0') or externally clocked mode ('1') operation. In internally clocked mode, the serial interface protocols run off the peripheral clock. In externally clocked mode, the serial interface protocols run off the clock as provided by the serial interface." />
      <field name="EZ_MODE" from="10" to="10" access="RW" resetVal="" desc="Non EZ mode ('0') or EZ mode ('1'). In EZ mode, a meta protocol is applied to the serial interface protocol." />
      <field name="BYTE_MODE" from="11" to="11" access="RW" resetVal="" desc="Determines the number of bits per FIFO data element: '0' - 16-bit FIFO data elements (FIFO entries 8), '1' - 8-bit FIFO data elements (FIFO entries 16). Setting data elemelents to 8-bits doubles the amount of FIFO entries." />
      <field name="ADDR_ACCEPT" from="16" to="16" access="RW" resetVal="" desc="Determines whether a received matching address is accepted in the RX FIFO ('1') or not ('0').his field is used in the I2C mode." />
      <field name="BLOCK" from="17" to="17" access="RW" resetVal="" desc=" If the externally clocked logic and the MMIO SW accesses to EZ memory coincide/collide, this bit determines whether a SW access should block and result in bus wait states ('BLOCK is 1') or not (BLOCK is '0')" />
      <field name="MODE" from="25" to="24" access="RW" resetVal="" desc="Mode of operation: I2C = 0, SPI = 1, UART = 2" />
      <field name="ENABLED" from="31" to="31" access="RW" resetVal="" desc="IP enabled ('1') or not ('0')." />
    </register>
    <register name="_SPI_CTRL" address="0x40080020" bitWidth="32" desc="SPI control register" hidden="false">
      <field name="CONTINUOUS" from="0" to="0" access="RW" resetVal="" desc="Continuous SPI data transfers enabled ('1') or not ('0')." />
      <field name="SELECT_PRECEDE" from="1" to="1" access="RW" resetVal="" desc="Only used in SPI Texas Instruments' submode. When '1', the data frame start indication is a pulse on the SELECT line that precedes the transfer of the first data frame bit. When '0', the data frame start indication is a pulse on the SELECT line that coincides with the transfer of the first data frame bit." />
      <field name="CPHA" from="2" to="2" access="RW" resetVal="" desc="Only applicable in SPI Motorola submode. Indicates the clock phase." />
      <field name="CPOL" from="3" to="3" access="RW" resetVal="" desc="Only applicable in SPI Motorola submode. Indicates the clock polarity." />
      <field name="LATE_MISO_SAMPLE" from="4" to="4" access="RW" resetVal="" desc="Only applicable in master mode. Changes the SCLK edge on which MISO is captured." />
      <field name="SCLK_CONTINUOUS" from="5" to="5" access="RW" resetVal="" desc="Enables SCLK generation continuiusly by master regars data is avaiable in TX FIFO or not." />
      <field name="SSEL_POLARITY0" from="8" to="8" access="RW" resetVal="" desc="Slave select polarity of SS0." />
      <field name="SSEL_POLARITY1" from="9" to="9" access="RW" resetVal="" desc="Slave select polarity of SS1." />
      <field name="SSEL_POLARITY2" from="10" to="10" access="RW" resetVal="" desc="Slave select polarity of SS2." />
      <field name="SSEL_POLARITY3" from="11" to="11" access="RW" resetVal="" desc="Slave select polarity of SS3." />
      <field name="LOOPBACK" from="16" to="16" access="RW" resetVal="" desc="Local loopback control." />
      <field name="MODE" from="25" to="24" access="RW" resetVal="" desc="Submode of SPI operation: Motorola = 0, Texas Instruments = 1, National Semiconducturs = 2." />
      <field name="SLAVE_SELECT" from="27" to="26" access="RW" resetVal="" desc="Selects one of the four SPI slave select signals: SS0 = 0, SS1 = 1 , SS2 = 2, SS3 = 3." />
      <field name="MASTER_MODE" from="31" to="31" access="RW" resetVal="" desc="Master ('1') or slave ('0') mode." />
    </register>
    <register name="_SPI_STATUS" address="0x40080024" bitWidth="32" desc="SPI status register" hidden="false">
      <field name="BUS_BUSY" from="0" to="0" access="R" resetVal="" desc="SPI bus is busy. The bus is considered busy ('1') during an ongoing transaction" />
    </register>
    <register name="_UART_CTRL" address="0x40080040" bitWidth="32" desc="UART control register" hidden="false">
      <field name="LOOPBACK" from="16" to="16" access="RW" resetVal="" desc="Local loopback control." />
      <field name="MODE" from="25" to="24" access="RW" resetVal="" desc="Submode of UART operation: Standard = 0, Smart Card = 1, IrDA = 2." />
    </register>
    <register name="_UART_TX_CTRL" address="0x40080044" bitWidth="32" desc="UART transmitter control register" hidden="false">
      <field name="STOP_BTIS" from="2" to="0" access="RW" resetVal="" desc="Stop bits. STOP_BITS + 1 is the duration of the stop period in terms of halve bit periods." />
      <field name="PARITY" from="4" to="4" access="RW" resetVal="" desc="Parity bit. When '0', the transmitter generates an even parity. When '1', the transmitter generates an odd parity" />
      <field name="PARITY_ENABLED" from="5" to="5" access="RW" resetVal="" desc="Parity generation enabled ('1') or not ('0'). Only applicable in standard UART submodes. In SmartCard submode, parity generation is always enabled through hardware. In IrDA submode, parity generation is always disabled through hardware." />
      <field name="RETRY_ON_NACK" from="8" to="8" access="RW" resetVal="" desc="When '1', a data frame is retransmitted when a negative acknowledgement is received. Only applicable to the SmartCard submode." />
    </register>
    <register name="_UART_RX_CTRL" address="0x40080048" bitWidth="32" desc="UART receiver control register" hidden="false">
      <field name="STOP_BITS" from="2" to="0" access="RW" resetVal="" desc="Stop bits. STOP_BITS + 1 is the duration of the stop period in terms of halve bit periods." />
      <field name="PARITY" from="4" to="4" access="RW" resetVal="" desc="Parity bit. When '0', the receiver expects an even parity. When '1', the receiver expects an odd parity." />
      <field name="PARITY_ENABLED" from="5" to="5" access="RW" resetVal="" desc="Parity checking enabled ('1') or not ('0'). Only applicable in standard UART submode. In SmartCard submode, parity checking is always enabled through hardware. In IrDA submode, parity checking is always disabled through hardware." />
      <field name="POLARITY" from="6" to="6" access="RW" resetVal="" desc="Inverts incoming RX line signal. Inversion is after local loopback. This functionality is intended for IrDA receiver functionality." />
      <field name="DROP_ON_PARITY_ERR" from="8" to="8" access="RW" resetVal="" desc="Behaviour when a parity check fails. When '0', received data is send to the RX FIFO. When '1', received data is dropped and lost." />
      <field name="DROP_ON_FRAME_ERR" from="9" to="9" access="RW" resetVal="" desc="Behaviour when an error is detected in a start or stop period. When '0', received data is send to the RX FIFO. When '1', received data is dropped and lost." />
      <field name="MP_MODE" from="10" to="10" access="RW" resetVal="" desc="Multi-processor mode. When '1', multi-processor mode is enabled. In this mode, RX_CTRL.DATA_WIDTH should indicate a 9-bit data frame." />
      <field name="LIN_MODE" from="12" to="12" access="RW" resetVal="" desc="Only applicable in standard UART submode. When '1', the receiver performs break detection and baud rate detection on the incoming data" />
      <field name="SKIP_START" from="13" to="13" access="RW" resetVal="" desc="Only applicable in standard UART submode. When '1', the receiver skips start bit detection for the first received data frame. Instead, it synchronizes on the first received data frame bit, which should be a '1'." />
      <field name="BREAK_WIDTH" from="19" to="16" access="RW" resetVal="" desc="Break width. BREAK_WIDTH + 1 is the minimum width in bit periods of a break." />
    </register>
    <register name="_UART_FLOW_CTRL" address="0x40080050" bitWidth="32" desc="UART flow control register" hidden="false">
      <field name="TRIGGER_LEVEL" from="3" to="0" access="RW" resetVal="" desc="Trigger level. When the receiver FIFO has less entries than the amount of this field, a RTS signal is activated. Setting this field to 0 disables RTS generation." />
      <field name="RTS_POLARITY" from="16" to="16" access="RW" resetVal="" desc="Polarity of the RTS output signal" />
      <field name="CTS_POLARITY" from="24" to="24" access="RW" resetVal="" desc="Polarity of the CTS input signal" />
      <field name="CTS_ENABLED" from="25" to="25" access="RW" resetVal="" desc="Enable use of CTS input signal by the UART transmitter" />
    </register>
    <register name="_I2C_CTRL" address="0x40080060" bitWidth="32" desc="I2C control register" hidden="false">
      <field name="HIGH_PHASE_OVS" from="3" to="0" access="RW" resetVal="" desc="Serial I2C interface high phase oversampling factor. HIGH_PHASE_OVS + 1 peripheral clock periods constitute the high phase of a bit period." />
      <field name="LOW_PHASE_OVS" from="7" to="4" access="RW" resetVal="" desc="Serial I2C interface low phase oversampling factor. LOW_PHASE_OVS + 1 peripheral clock periods constitute the low phase of a bit period" />
      <field name="M_READY_DATA_ACK" from="8" to="8" access="RW" resetVal="" desc="When '1', a received data element by the master is immediately ACK'd when the receiver FIFO is not full." />
      <field name="M_NOT_READY_DATA_NACK" from="9" to="9" access="RW" resetVal="" desc="When '1', a received data element byte the master is immediately NACK'd when the receiver FIFO is full. When '0', clock stretching is used instead (till the receiver FIFO is no longer full)." />
      <field name="S_GENERAL_IGNORE" from="11" to="11" access="RW" resetVal="" desc="When '1', a received general call slave address is immediately NACK'd (no ACK or clock stretching) and treated as a non matching slave address." />
      <field name="S_READY_ADDR_ACK" from="12" to="12" access="RW" resetVal="" desc="When '1', a received (matching) slave address is immediately ACK'd when the receiver FIFO is not full" />
      <field name="S_READY_DATA_ACK" from="13" to="13" access="RW" resetVal="" desc="When '1', a received data element by the slave is immediately ACK'd when the receiver FIFO is not full" />
      <field name="S_NOT_READY_ADDR_NACK" from="14" to="14" access="RW" resetVal="" desc="When '1', a received address by the slave is immediately ACK'd when the receiver FIFO is not full" />
      <field name="S_NOT_READY_DATA_NACK" from="15" to="15" access="RW" resetVal="" desc=" When '1' a received data element byte the slave is immediately NACK'd when the receiver FIFO is full. When '1' clock stretching is performed (till the receiver FIFO is no longer full)." />
      <field name="LOOPBACK" from="16" to="16" access="RW" resetVal="" desc="Local loopback control" />
      <field name="SLAVE_MODE" from="30" to="30" access="RW" resetVal="" desc="Slave mode enabled ('1') or not ('0')." />
      <field name="MASTER_MODE" from="31" to="31" access="RW" resetVal="" desc="Master mode enabled ('1') or not ('0'). Note that both master and slave modes can be enabled at the same time. This allows the IP to address itself." />
    </register>
    <register name="_I2C_STATUS" address="0x40080064" bitWidth="32" desc="I2C status register" hidden="false">
      <field name="BUS_BUSY" from="0" to="0" access="R" resetVal="" desc="I2C bus is busy. The bus is considered busy ('1')." />
      <field name="S_READ" from="4" to="4" access="R" resetVal="" desc="I2C slave read transfer ('1') or I2C slave write transfer ('0'). When the I2C slave is inactive/idle or receiving START, REPEATED START, STOP or an address, this field is '0'." />
      <field name="M_READ" from="5" to="5" access="R" resetVal="" desc="I2C master read transfer ('1') or I2C master write transfer ('0'). When the I2C master is inactive/idle or transmitting START, REPEATED START, STOP or an address, this field is '0''." />
    </register>
    <register name="_I2C_M_CMD" address="0x40080068" bitWidth="32" desc="I2C master command register" hidden="false">
      <field name="M_START" from="0" to="0" access="RW" resetVal="" desc="When '1', transmit a START or REPEATED START. Whether a START or REPEATED START is transmitted depends on the state of the master state machine. When this action is performed, the hardware sets this field to '0'." />
      <field name="M_IDLE_START" from="1" to="1" access="RW" resetVal="" desc="When '1', transmit a START as soon as the bus is idle (I2C_STATUS.BUS_BUSY is '0', note that BUSY has a default value of '0'). When this action is performed, the hardware sets this field to '0'." />
      <field name="M_ACK" from="2" to="2" access="RW" resetVal="" desc="When '1', attempt to transmit an acknowledgement (ACK). When this action is performed, the hardware sets this field to '0'." />
      <field name="M_NACK" from="3" to="3" access="RW" resetVal="" desc="When '1', attempt to transmit a negative acknowledgement (NACK). When this action is performed, the hardware sets this field to '0'." />
      <field name="M_STOP" from="4" to="4" access="RW" resetVal="" desc="When '1', attempt to transmit a STOP. When this action is performed, the hardware sets this field to '0'. This command has a higher priority than I2C_M_CMD.M_START: in situations where both a STOP and a REPEATED START could be transmitted, M_STOP takes precedence over M_START." />
    </register>
    <register name="_I2C_S_CMD" address="0x4008006C" bitWidth="32" desc="I2C slave command register" hidden="false">
      <field name="S_ACK" from="0" to="0" access="RW" resetVal="" desc="When '1', attempt to transmit an acknowledgement (ACK). When this action is performed, the hardware sets this field to '0'." />
      <field name="S_NACK" from="1" to="1" access="RW" resetVal="" desc="When '1', attempt to transmit a negative acknowledgement (NACK). When this action is performed, the hardware sets this field to '0'" />
    </register>
    <register name="_I2C_CFG" address="0x40080070" bitWidth="32" desc="I2C fitler trimm register" hidden="false">
      <field name="SDA_IN_FILT_TRIM" from="1" to="0" access="RW" resetVal="" desc="" />
      <field name="SDA_IN_FILT_SEL" from="4" to="4" access="RW" resetVal="" desc="" />
      <field name="SCL_IN_FILT_TRIM" from="9" to="8" access="RW" resetVal="" desc="" />
      <field name="SCL_IN_FILT_SEL" from="12" to="12" access="RW" resetVal="" desc="" />
      <field name="SDA_OUT_FILT0_TRIM" from="17" to="16" access="RW" resetVal="" desc="" />
      <field name="SDA_OUT_FILT1_TRIM" from="19" to="18" access="RW" resetVal="" desc="" />
      <field name="SDA_OUT_FILT2_TRIM" from="21" to="20" access="RW" resetVal="" desc="" />
      <field name="SDA_OUT_FILT_SEL" from="29" to="28" access="RW" resetVal="" desc="" />
    </register>
    <register name="_TX_CTRL" address="0x40080200" bitWidth="32" desc="Transmitter control register" hidden="false">
      <field name="DATA_WIDTH" from="3" to="0" access="RW" resetVal="" desc="Data frame width. DATA_WIDTH + 1 is the amount of bits in a transmitted data frame." />
      <field name="MSB_FIRST" from="8" to="8" access="RW" resetVal="" desc="Least significant bit first ('0') or most significant bit first ('1'). For I2C, this field should be '1'." />
    </register>
    <register name="_TX_FIFO_CTRL" address="0x40080204" bitWidth="32" desc="Transmitter FIFO control register" hidden="false">
      <field name="TRIGGER_LEVEL" from="3" to="0" access="RW" resetVal="" desc="Trigger level. When the transmitter FIFO has less entries than the amount of this field, a transmitter trigger event is generated." />
      <field name="CLEAR" from="16" to="16" access="RW" resetVal="" desc="When '1', the transmitter FIFO and transmitter shift register are cleared/invalidated. Invalidation will last for as long as this field is '1'. If a quick clear/invalidation is required, the field should be set to '1' and be followed by a set to '0'. If a clear/invalidation is required for an extended time period, the field should be set to '1' during the complete time period." />
      <field name="FREEZE" from="17" to="17" access="RW" resetVal="" desc="When '1', hardware reads from the transmitter FIFO do not remove FIFO entries. Freeze will not advance the TX FIFO read pointer." />
    </register>
    <register name="_TX_FIFO_STATUS" address="0x40080208" bitWidth="32" desc="Transmitter FIFO status register" hidden="false">
      <field name="USED" from="4" to="0" access="R" resetVal="" desc="Amount of entries in the transmitter FIFO. The value of this field ranges from 0 to 8." />
      <field name="SR_VALID" from="15" to="15" access="R" resetVal="" desc="Indicates whether the TX shift registers holds a valid data frame ('1') or not ('0')" />
      <field name="RD_PTR" from="20" to="16" access="R" resetVal="" desc="FIFO read pointer: FIFO location from which a data frame is read by the hardware." />
      <field name="WR_PTR" from="28" to="24" access="R" resetVal="" desc="FIFO write pointer: FIFO location at which a new data frame is written." />
    </register>
    <register name="_TX_FIFO_WR" address="0x40080240" bitWidth="32" desc="Transmitter FIFO write register" hidden="false">
      <field name="DATA" from="15" to="0" access="W" resetVal="" desc="Data frame written into the transmitter FIFO. Behavior is similar to that of a PUSH operation." />
    </register>
    <register name="_RX_CTRL" address="0x40080300" bitWidth="32" desc="Receiver control register" hidden="false">
      <field name="DATA_WIDTH" from="3" to="0" access="RW" resetVal="" desc="Data frame width. DATA_WIDTH + 1 is the expected amount of bits in received data frame." />
      <field name="MSB_FIRST" from="8" to="8" access="RW" resetVal="" desc="Least significant bit first ('0') or most significant bit first ('1')." />
      <field name="MEDIAN" from="9" to="9" access="RW" resetVal="" desc="Median filter. When '1', a digital 3 taps median filter is performed on input interface lines." />
    </register>
    <register name="_RX_FIFO_CTRL" address="0x40080304" bitWidth="32" desc="Receiver FIFO control register" hidden="false">
      <field name="TRIGGER_LEVEL" from="3" to="0" access="RW" resetVal="" desc="Trigger level. When the receiver FIFO has more entries than the amount of this field, a receiver trigger event is generated." />
      <field name="CLEAR" from="16" to="16" access="RW" resetVal="" desc="When '1', the receiver FIFO and receiver shift register are cleared/invalidated. Invalidation will last for as long as this field is '1'. If a quick clear/invalidation is required, the field should be set to '1' and be followed by a set to '0'. If a clear/invalidation is required for an extended time period, the field should be set to '1' during the complete time period." />
      <field name="FREEZE" from="17" to="17" access="RW" resetVal="" desc="When '1', hardware writes to the receiver FIFO have no effect. Freeze will not advance the RX FIFO write pointer." />
    </register>
    <register name="_RX_FIFO_STATUS" address="0x40080308" bitWidth="32" desc="Receiver FIFO status registerS" hidden="false">
      <field name="USED" from="4" to="0" access="R" resetVal="" desc="Amount of entries in the receiver FIFO. The value of this field ranges from 0 to 8." />
      <field name="SR_VALID" from="15" to="15" access="R" resetVal="" desc="Indicates whether the RX shift registers holds a (partial) valid data frame ('1') or not ('0')." />
      <field name="RD_PTR" from="20" to="16" access="R" resetVal="" desc="FIFO read pointer: FIFO location from which a data frame is read." />
      <field name="WR_PTR" from="28" to="24" access="R" resetVal="" desc="FIFO write pointer: FIFO location at which a new data frame is written by the hardware." />
    </register>
    <register name="_RX_MATCH" address="0x40080310" bitWidth="32" desc="Slave address and mask register" hidden="false">
      <field name="ADDR" from="7" to="0" access="RW" resetVal="" desc="Slave device address. For UART multi-processor mode all eight bits a reused. For I2C, bit 0 of the register is not used." />
      <field name="MASK" from="23" to="16" access="RW" resetVal="" desc="Slave device address mask. This field is a 8 bit mask that specifies which of the ADDR field bits in the SCB_RX_MATCH_ADDR register take part in the matching of the slave address." />
    </register>
    <register name="_RX_FIFO_RD" address="0x40080340" bitWidth="32" desc="Receiver FIFO read register" hidden="false">
      <field name="DATA" from="15" to="0" access="R" resetVal="" desc="Data read from the receiver FIFO. Reading a data frame will remove the data frame from the FIFO." />
    </register>
    <register name="_INTR_CAUSE" address="0x40080E00" bitWidth="32" desc="Interrupt cause register" hidden="false">
      <field name="MASTER" from="0" to="0" access="R" resetVal="" desc="Master interrupt active." />
      <field name="SLAVE" from="1" to="1" access="R" resetVal="" desc="Slave interrupt active." />
      <field name="TX" from="2" to="2" access="R" resetVal="" desc="Transmitter interrupt active." />
      <field name="RX" from="3" to="3" access="R" resetVal="" desc="Receiver interrupt active." />
      <field name="I2C_EC" from="4" to="4" access="R" resetVal="" desc="Externally clock I2C interrupt active." />
      <field name="SPI_EC" from="5" to="5" access="R" resetVal="" desc="Externally clocked SPI interrupt active." />
    </register>
    <register name="_INTR_I2C_EC" address="0x40080E80" bitWidth="32" desc="Externally clocked I2C interrupt request register" hidden="false">
      <field name="WAKE_UP" from="0" to="0" access="RW" resetVal="" desc="Wake up request. Active on incoming slave request (with address match). Only used when EC_AM is '1'." />
    </register>
    <register name="_INTR_I2C_EC_MASK" address="0x40080E88" bitWidth="32" desc="Externally clocked I2C interrupt mask register" hidden="false">
      <field name="WAKE_UP" from="0" to="0" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_I2C_EC_MASKED" address="0x40080E8C" bitWidth="32" desc="Externally clocked SPI interrupt masked register" hidden="false">
      <field name="WAKE_UP" from="0" to="0" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
    </register>
    <register name="_INTR_INTR_SPI_EC" address="0x40080EC0" bitWidth="32" desc="Externally clocked SPI interrupt request register" hidden="false">
      <field name="WAKE_UP" from="0" to="0" access="RW" resetVal="" desc="Wake up request. Active on incoming slave request when externally clocked selection is '1'." />
    </register>
    <register name="_INTR_INTR_SPI_EC_MASK" address="0x40080EC8" bitWidth="32" desc="Externally clocked SPI interrupt mask register" hidden="false">
      <field name="WAKE_UP" from="0" to="0" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_INTR_SPI_EC_MASKED" address="0x40080ECC" bitWidth="32" desc="Externally clocked SPI interrupt masked register" hidden="false">
      <field name="WAKE_UP" from="0" to="0" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
    </register>
    <register name="_INTR_M" address="0x40080F00" bitWidth="32" desc="Master interrupt request register." hidden="false">
      <field name="I2C_LOST_ARB" from="0" to="0" access="RW" resetVal="" desc="I2C master lost arbitration: the value driven by the master on the SDA line is not the same as the value observed on the SDA line." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="I2C master negative acknowledgement. Set to '1', when the master receives a NACK (typically after the master transmitted the slave address or TX data)." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="I2C master acknowledgement. Set to '1', when the master receives a ACK (typically after the master transmitted the slave address or TX data)." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="I2C master STOP. Set to '1', when the master has transmitted a STOP." />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="I2C master bus error (unexpected detection of START or STOP condition)." />
      <field name="SPI_DONE" from="9" to="9" access="RW" resetVal="" desc="SPI master transfer done event: all data frames in the transmit FIFO are sent and the transmit FIFO is empty." />
    </register>
    <register name="_INTR_M_SET" address="0x40080F04" bitWidth="32" desc="Master interrupt set request register" hidden="false">
      <field name="I2C_LOST_ARB" from="0" to="0" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="SPI_DONE" from="9" to="9" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_M_MASK" address="0x40080F08" bitWidth="32" desc="Master interrupt mask register" hidden="false">
      <field name="I2C_LOST_ARB" from="0" to="0" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="SPI_DONE" from="9" to="9" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_M_MASKED" address="0x40080F0C" bitWidth="32" desc="Master interrupt masked request register" hidden="false">
      <field name="I2C_LOST_ARB" from="0" to="0" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="SPI_DONE" from="9" to="9" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
    </register>
    <register name="_INTR_S" address="0x40080F40" bitWidth="32" desc="Slave interrupt request register" hidden="false">
      <field name="I2C_ARB_LOST" from="0" to="0" access="RW" resetVal="" desc="I2C slave lost arbitration: the value driven on the SDA line is not the same as the value observed on the SDA line (while the SCL line is '1')." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="I2C slave negative acknowledgement received. Set to '1', when the slave receives a NACK (typically after the slave transmitted TX data)." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="I2C slave acknowledgement received. Set to '1', when the slave receives a ACK (typically after the slave transmitted TX data)." />
      <field name="I2C_WRITE_STOP" from="3" to="3" access="RW" resetVal="" desc="I2C STOP event for I2C write transfer intended for this slave (address matching is performed).Set to '1', when STOP or REPEATED START event is detected." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="I2C STOP event for I2C (read or write) transfer intended for this slave (address matching is performed). Set to '1', when STOP or REPEATED START event is detected" />
      <field name="I2C_START" from="5" to="5" access="RW" resetVal="" desc="I2C slave START received. Set to '1', when START or REPEATED START event is detected." />
      <field name="I2C_ADDR_MATCH" from="6" to="6" access="RW" resetVal="" desc="I2C slave matching address received. If CTRL.ADDR_ACCEPT, the received address (including the R/W bit) is available in the RX FIFO." />
      <field name="I2C_GENERAL" from="7" to="7" access="RW" resetVal="" desc="I2C slave general call address received.  If CTRL.ADDR_ACCEPT, the received address 0x00 (including the R/W bit) is available in the RX FIFO" />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="I2C slave bus error (unexpected detection of START or STOP condition)." />
      <field name="SPI_BUS_ERR" from="11" to="11" access="RW" resetVal="" desc="SPI slave deselected at an unexpected time in the SPI transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error." />
    </register>
    <register name="_INTR_S_SET" address="0x40080F44" bitWidth="32" desc="Slave interrupt set request register" hidden="false">
      <field name="I2C_ARB_LOST" from="0" to="0" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_WRITE_STOP" from="3" to="3" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_START" from="5" to="5" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_ADDR_MATCH" from="6" to="6" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_GENERAL" from="7" to="7" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="SPI_BUS_ERR" from="11" to="11" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_S_MASK" address="0x40080F48" bitWidth="32" desc="Slave interrupt mask register" hidden="false">
      <field name="I2C_ARB_LOST" from="0" to="0" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_WRITE_STOP" from="3" to="3" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_START" from="5" to="5" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_ADDR_MATCH" from="6" to="6" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_GENERAL" from="7" to="7" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="I2C_BUS_ERR" from="8" to="8" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="SPI_BUS_ERR" from="11" to="11" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_S_MASKED" address="0x40080F4C" bitWidth="32" desc="Slave interrupt masked register" hidden="false">
      <field name="I2C_ARB_LOST" from="0" to="0" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_NACK" from="1" to="1" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_ACK" from="2" to="2" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_WRITE_STOP" from="3" to="3" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_STOP" from="4" to="4" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_START" from="5" to="5" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_ADDR_MATCH" from="6" to="6" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="I2C_GENERAL" from="7" to="7" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="SPI_BUS_ERR" from="11" to="11" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
    </register>
    <register name="_INTR_TX" address="0x40080F80" bitWidth="32" desc="Transmitter interrupt request register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Less entries in the TX FIFO than the value specified by TRIGGER_LEVEL in SCB_TX_FIFO_CTL." />
      <field name="NOT_FULL" from="1" to="1" access="RW" resetVal="" desc="TX FIFO is not full." />
      <field name="EMPTY" from="4" to="4" access="RW" resetVal="" desc="TX FIFO is empty; i.e. it has 0 entries." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Attempt to write to a full TX FIFO." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Attempt to read from an empty TX FIFO." />
      <field name="UART_NACK" from="8" to="8" access="RW" resetVal="" desc="UART transmitter received a negative acknowledgement in SmartCard mode. Set to '1', when event is detected." />
      <field name="UART_DONE" from="9" to="9" access="RW" resetVal="" desc="UART transmitter done event. This happens when the IP is done transferring all data in the TX FIFO; i.e. EMPTY is '1'. Set to '1', when event is detected." />
      <field name="UART_ARB_LOST" from="10" to="10" access="RW" resetVal="" desc="UART lost arbitration: the value driven on the TX line is not the same as the value observed on the RX line. " />
    </register>
    <register name="_INTR_TX_SET" address="0x40080F84" bitWidth="32" desc="Transmitter interrupt set request register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="NOT_FULL" from="1" to="1" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="EMPTY" from="4" to="4" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="UART_NACK" from="8" to="8" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="UART_DONE" from="9" to="9" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="UART_ARB_LOST" from="10" to="10" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_TX_MASK" address="0x40080F88" bitWidth="32" desc="Transmitter interrupt mask request register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="NOT_FULL" from="1" to="1" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="EMPTY" from="4" to="4" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="UART_NACK" from="8" to="8" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="UART_DONE" from="9" to="9" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="UART_ARB_LOST" from="10" to="10" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_TX_MASKED" address="0x40080F8C" bitWidth="32" desc="Transmitter interrupt masked request register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="NOT_FULL" from="1" to="1" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="EMPTY" from="4" to="4" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="UART_NACK" from="8" to="8" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="UART_DONE" from="9" to="9" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="UART_ARB_LOST" from="10" to="10" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
    </register>
    <register name="_INTR_RX" address="0x40080FC0" bitWidth="32" desc="Receiver interrupt request register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="More entries in the RX FIFO than the value specified by TRIGGER_LEVEL in SCB_RX_FIFO_CTL." />
      <field name="NOT_EMPTY" from="2" to="2" access="RW" resetVal="" desc="RX FIFO is not empty." />
      <field name="FULL" from="3" to="3" access="RW" resetVal="" desc="RX FIFO is full. Note that received data frames are lost when the RX FIFO is full." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Attempt to write to a full RX FIFO. Note: in I2C mode, the OVERFLOW is set when a data frame is received and the RX FIFO is full, independent of whether it is ACK'd or NACK'd." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Attempt to read from an empty RX FIFO." />
      <field name="FRAME_ERR" from="8" to="8" access="RW" resetVal="" desc="Frame error in received data frame. Set to '1', when event is detected." />
      <field name="PARITY_ERR" from="9" to="9" access="RW" resetVal="" desc="Parity error in received data frame. Set to '1', when event is detected." />
      <field name="BAUD_DETECT" from="10" to="10" access="RW" resetVal="" desc="LIN baud rate detection is completed." />
      <field name="BREAK_DETECT" from="11" to="11" access="RW" resetVal="" desc="Break detection is successful: the line is '0' for UART_RX_CTRL.BREAK_WIDTH + 1 bit period." />
    </register>
    <register name="_INTR_RX_SET" address="0x40080FC4" bitWidth="32" desc="Receiver interrupt set request register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="NOT_EMPTY" from="2" to="2" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="FULL" from="3" to="3" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="FRAME_ERR" from="8" to="8" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="PARITY_ERR" from="9" to="9" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="BAUD_DETECT" from="10" to="10" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
      <field name="BREAK_DETECT" from="11" to="11" access="RW" resetVal="" desc="Write with '1' to set corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_RX_MASK" address="0x40080FC8" bitWidth="32" desc="Receiver interrupt mask register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="NOT_EMPTY" from="2" to="2" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="FULL" from="3" to="3" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="FRAME_ERR" from="8" to="8" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="PARITY_ERR" from="9" to="9" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="BAUD_DETECT" from="10" to="10" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
      <field name="BREAK_DETECT" from="11" to="11" access="RW" resetVal="" desc="Mask bit for corresponding bit in interrupt request register." />
    </register>
    <register name="_INTR_RX_MASKED" address="0x40080FCC" bitWidth="32" desc="Receiver interrupt masked register" hidden="false">
      <field name="TRIGGER" from="0" to="0" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="NOT_EMPTY" from="2" to="2" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="FULL" from="3" to="3" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="OVERFLOW" from="5" to="5" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="UNDERFLOW" from="6" to="6" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits." />
      <field name="FRAME_ERR" from="8" to="8" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits" />
      <field name="PARITY_ERR" from="9" to="9" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits" />
      <field name="BAUD_DETECT" from="10" to="10" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits" />
      <field name="BREAK_DETECT" from="11" to="11" access="RW" resetVal="" desc="Logical and of corresponding request and mask bits" />
    </register>
  </block>
  <block name="blue" BASE="0x0" SIZE="0x0" desc="" visible="true" hidden="false" />
</blockRegMap>